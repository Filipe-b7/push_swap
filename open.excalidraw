{
  "type": "excalidraw",
  "version": 2,
  "source": "https://marketplace.visualstudio.com/items?itemName=pomdtr.excalidraw-editor",
  "elements": [
    {
      "id": "cYP9Z0qagVkCa4durxcpA",
      "type": "text",
      "x": -153.06038997093822,
      "y": 1508.2218356005158,
      "width": 1471.9208984375,
      "height": 414.96521783896947,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "a2",
      "roundness": null,
      "seed": 1289176203,
      "version": 1500,
      "versionNonce": 102845067,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1749051312309,
      "link": null,
      "locked": false,
      "text": "Turkey Sort\n\n-push everything from stack A to stack B in descending order\n         -As i need a maximum, first push the first 2 numbers (PUSH A, PUSH A)\n         -push the number of stack A above the target(next number in stack)\n          - if its the new biggest or smallestof STACK B, push above the old biggest number\n         - until stack A has 3 numbers to sort\n-sort  stack A (3 numbers)\n-time to push back to STACK A\n         - rotate/ reverse rotate  the stack A until its the correct positon to push stack b number \n         -push the minimum number to the top, if needed",
      "fontSize": 30.17928857010687,
      "fontFamily": 5,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Turkey Sort\n\n-push everything from stack A to stack B in descending order\n         -As i need a maximum, first push the first 2 numbers (PUSH A, PUSH A)\n         -push the number of stack A above the target(next number in stack)\n          - if its the new biggest or smallestof STACK B, push above the old biggest number\n         - until stack A has 3 numbers to sort\n-sort  stack A (3 numbers)\n-time to push back to STACK A\n         - rotate/ reverse rotate  the stack A until its the correct positon to push stack b number \n         -push the minimum number to the top, if needed",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "DvxbUf7ArHqiRT90kMb7F",
      "type": "text",
      "x": 959.009580990716,
      "y": 2119.732875883794,
      "width": 160.1598663330078,
      "height": 150,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "a4",
      "roundness": null,
      "seed": 1299138827,
      "version": 392,
      "versionNonce": 1619073867,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1749049171466,
      "link": null,
      "locked": false,
      "text": "Moves:\n\n    -sa  -sb  -ss\n    -pa  -pb\n    -ra  -rb  -rr\n    -rra -rrb  -rrr",
      "fontSize": 20,
      "fontFamily": 5,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Moves:\n\n    -sa  -sb  -ss\n    -pa  -pb\n    -ra  -rb  -rr\n    -rra -rrb  -rrr",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "1Zvmwxz-tr8DTBFuVvmQI",
      "type": "text",
      "x": 33.60649663842162,
      "y": 2451.011594053677,
      "width": 370.2596740722656,
      "height": 150,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "a5",
      "roundness": null,
      "seed": 641461349,
      "version": 504,
      "versionNonce": 461933957,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1749049192699,
      "link": null,
      "locked": false,
      "text": "function to see if i use the same algo\nfor the 2 stacks \n\n\n    -ex : 4 ra and 3 rb  -- total 7\n    -sol : 3 rr and 1 ra -- total 4",
      "fontSize": 20,
      "fontFamily": 5,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "function to see if i use the same algo\nfor the 2 stacks \n\n\n    -ex : 4 ra and 3 rb  -- total 7\n    -sol : 3 rr and 1 ra -- total 4",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "AUyer7D5fYajkmlKHNt4-",
      "type": "text",
      "x": 4.6964657748268905,
      "y": 2107.102905232055,
      "width": 744.8994140625,
      "height": 275,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "a6",
      "roundness": null,
      "seed": 1578961509,
      "version": 870,
      "versionNonce": 134133835,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1749049166666,
      "link": null,
      "locked": false,
      "text": "function to see costs of moving\n    -we only change if the cost is small, else stay with 1st number same cost\n    -if it is either new maximum or minimum of stack B, WE put it above \n         previous maximum (FUNCTION TO ALWAYS SEE THE MAX  AND IN\nOF STACK B?)\ncost = put number in top of stack A + put the target number in top of\nstack B+ 1 push \n\nput number in top of stack: if its under the median, rr , if not r\n\n",
      "fontSize": 20,
      "fontFamily": 5,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "function to see costs of moving\n    -we only change if the cost is small, else stay with 1st number same cost\n    -if it is either new maximum or minimum of stack B, WE put it above \n         previous maximum (FUNCTION TO ALWAYS SEE THE MAX  AND IN OF STACK B?)\ncost = put number in top of stack A + put the target number in top of stack B+ 1 push \n\nput number in top of stack: if its under the median, rr , if not r\n\n",
      "autoResize": false,
      "lineHeight": 1.25
    },
    {
      "id": "35aXkOPiL6OuJiGllJN2C",
      "type": "text",
      "x": 23.9977010310771,
      "y": 2515.953722994355,
      "width": 406.2996826171875,
      "height": 40,
      "angle": 0,
      "strokeColor": "#e03131",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "a8",
      "roundness": null,
      "seed": 83208171,
      "version": 290,
      "versionNonce": 1015452901,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1749049192699,
      "link": null,
      "locked": false,
      "text": "  WARNING :CHECK IF THE ORDER MATERS\n",
      "fontSize": 16,
      "fontFamily": 5,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "  WARNING :CHECK IF THE ORDER MATERS\n",
      "autoResize": false,
      "lineHeight": 1.25
    },
    {
      "id": "KZa78-KF_MQPmWmsmYCu4",
      "type": "text",
      "x": 34.438972757434044,
      "y": 2793.883936866383,
      "width": 357.01959228515625,
      "height": 162,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "aB",
      "roundness": null,
      "seed": 1868689131,
      "version": 796,
      "versionNonce": 2036551877,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1749049052931,
      "link": null,
      "locked": false,
      "text": "-pa, pa\n-while (sizeofStack(stackA) > 3)\n{\n        attribute_target(&stackA, &stackB)\n       \n}",
      "fontSize": 20,
      "fontFamily": 6,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "-pa, pa\n-while (sizeofStack(stackA) > 3)\n{\n        attribute_target(&stackA, &stackB)\n       \n}",
      "autoResize": true,
      "lineHeight": 1.35
    },
    {
      "id": "Eo2IiCKNVArtQIjBVBlRX",
      "type": "text",
      "x": 712.6400921397359,
      "y": 2605.65485080708,
      "width": 494.97214567989454,
      "height": 374.43288346045523,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "aG",
      "roundness": null,
      "seed": 1618329451,
      "version": 596,
      "versionNonce": 1401679947,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1749049133200,
      "link": null,
      "locked": false,
      "text": " attribute_target(&stack A, &stack b)\n    {\n        while(stackA)\n       {\n             -if (stackA->value  > biggest_value(STACK B) \n                stack-a->target = biggest_value(stack B) \n            -else if(stackA>value < smallest_number(STACK B))\n                        stack-a->target =  smallest_value(stack B)     \n              -Else\n                   {\n                       stackA->target= get_target(stack A, &stack b)\n                    }\n            stackA = stackA->next\n        }\n            ",
      "fontSize": 18.490512763479266,
      "fontFamily": 6,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": " attribute_target(&stack A, &stack b)\n    {\n        while(stackA)\n       {\n             -if (stackA->value  > biggest_value(STACK B) \n                stack-a->target = biggest_value(stack B) \n            -else if(stackA>value < smallest_number(STACK B))\n                        stack-a->target =  smallest_value(stack B)     \n              -Else\n                   {\n                       stackA->target= get_target(stack A, &stack b)\n                    }\n            stackA = stackA->next\n        }\n            ",
      "autoResize": true,
      "lineHeight": 1.35
    },
    {
      "id": "irLy2AtQ4No4XN70ggJ-r",
      "type": "text",
      "x": 668.3044420511567,
      "y": 2481.777589041555,
      "width": 427.0595703125,
      "height": 27,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "aH",
      "roundness": null,
      "seed": 1107720805,
      "version": 59,
      "versionNonce": 28569259,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1749049614629,
      "link": null,
      "locked": false,
      "text": "FUNCTION LIST_SIZE TO KNOW THE MEDIAN",
      "fontSize": 20,
      "fontFamily": 6,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "FUNCTION LIST_SIZE TO KNOW THE MEDIAN",
      "autoResize": true,
      "lineHeight": 1.35
    }
  ],
  "appState": {
    "gridSize": 20,
    "gridStep": 5,
    "gridModeEnabled": false,
    "viewBackgroundColor": "#ffffff"
  },
  "files": {}
}