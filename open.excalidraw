{
  "type": "excalidraw",
  "version": 2,
  "source": "https://marketplace.visualstudio.com/items?itemName=pomdtr.excalidraw-editor",
  "elements": [
    {
      "id": "cYP9Z0qagVkCa4durxcpA",
      "type": "text",
      "x": -153.06038997093822,
      "y": 1508.2218356005158,
      "width": 1471.9208984375,
      "height": 414.96521783896947,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "a2",
      "roundness": null,
      "seed": 1289176203,
      "version": 1502,
      "versionNonce": 1059331325,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1749054660961,
      "link": null,
      "locked": false,
      "text": "Turkey Sort\n\n-push everything from stack A to stack B in descending order\n         -As i need a maximum, first push the first 2 numbers (PUSH A, PUSH A)\n         -push the number of stack A above the target(next number in stack)\n          - if its the new biggest or smallestof STACK B, push above the old biggest number\n         - until stack A has 3 numbers to sort\n-sort  stack A (3 numbers)\n-time to push back to STACK A\n         - rotate/ reverse rotate  the stack A until its the correct positon to push stack b number \n         -push the minimum number to the top, if needed",
      "fontSize": 30.17928857010687,
      "fontFamily": 5,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Turkey Sort\n\n-push everything from stack A to stack B in descending order\n         -As i need a maximum, first push the first 2 numbers (PUSH A, PUSH A)\n         -push the number of stack A above the target(next number in stack)\n          - if its the new biggest or smallestof STACK B, push above the old biggest number\n         - until stack A has 3 numbers to sort\n-sort  stack A (3 numbers)\n-time to push back to STACK A\n         - rotate/ reverse rotate  the stack A until its the correct positon to push stack b number \n         -push the minimum number to the top, if needed",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "DvxbUf7ArHqiRT90kMb7F",
      "type": "text",
      "x": 959.009580990716,
      "y": 2119.732875883794,
      "width": 160.1598663330078,
      "height": 150,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "a4",
      "roundness": null,
      "seed": 1299138827,
      "version": 392,
      "versionNonce": 1619073867,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1749049171466,
      "link": null,
      "locked": false,
      "text": "Moves:\n\n    -sa  -sb  -ss\n    -pa  -pb\n    -ra  -rb  -rr\n    -rra -rrb  -rrr",
      "fontSize": 20,
      "fontFamily": 5,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Moves:\n\n    -sa  -sb  -ss\n    -pa  -pb\n    -ra  -rb  -rr\n    -rra -rrb  -rrr",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "1Zvmwxz-tr8DTBFuVvmQI",
      "type": "text",
      "x": 33.60649663842162,
      "y": 2451.011594053677,
      "width": 370.2596740722656,
      "height": 150,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "a5",
      "roundness": null,
      "seed": 641461349,
      "version": 504,
      "versionNonce": 461933957,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1749049192699,
      "link": null,
      "locked": false,
      "text": "function to see if i use the same algo\nfor the 2 stacks \n\n\n    -ex : 4 ra and 3 rb  -- total 7\n    -sol : 3 rr and 1 ra -- total 4",
      "fontSize": 20,
      "fontFamily": 5,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "function to see if i use the same algo\nfor the 2 stacks \n\n\n    -ex : 4 ra and 3 rb  -- total 7\n    -sol : 3 rr and 1 ra -- total 4",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "AUyer7D5fYajkmlKHNt4-",
      "type": "text",
      "x": 4.6964657748268905,
      "y": 2107.102905232055,
      "width": 744.8994140625,
      "height": 275,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "a6",
      "roundness": null,
      "seed": 1578961509,
      "version": 870,
      "versionNonce": 134133835,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1749049166666,
      "link": null,
      "locked": false,
      "text": "function to see costs of moving\n    -we only change if the cost is small, else stay with 1st number same cost\n    -if it is either new maximum or minimum of stack B, WE put it above \n         previous maximum (FUNCTION TO ALWAYS SEE THE MAX  AND IN\nOF STACK B?)\ncost = put number in top of stack A + put the target number in top of\nstack B+ 1 push \n\nput number in top of stack: if its under the median, rr , if not r\n\n",
      "fontSize": 20,
      "fontFamily": 5,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "function to see costs of moving\n    -we only change if the cost is small, else stay with 1st number same cost\n    -if it is either new maximum or minimum of stack B, WE put it above \n         previous maximum (FUNCTION TO ALWAYS SEE THE MAX  AND IN OF STACK B?)\ncost = put number in top of stack A + put the target number in top of stack B+ 1 push \n\nput number in top of stack: if its under the median, rr , if not r\n\n",
      "autoResize": false,
      "lineHeight": 1.25
    },
    {
      "id": "35aXkOPiL6OuJiGllJN2C",
      "type": "text",
      "x": 23.9977010310771,
      "y": 2515.953722994355,
      "width": 406.2996826171875,
      "height": 40,
      "angle": 0,
      "strokeColor": "#e03131",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "a8",
      "roundness": null,
      "seed": 83208171,
      "version": 290,
      "versionNonce": 1015452901,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1749049192699,
      "link": null,
      "locked": false,
      "text": "  WARNING :CHECK IF THE ORDER MATERS\n",
      "fontSize": 16,
      "fontFamily": 5,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "  WARNING :CHECK IF THE ORDER MATERS\n",
      "autoResize": false,
      "lineHeight": 1.25
    },
    {
      "id": "KZa78-KF_MQPmWmsmYCu4",
      "type": "text",
      "x": 42.438972757434044,
      "y": 2797.883936866383,
      "width": 449.7195739746094,
      "height": 270,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "aB",
      "roundness": null,
      "seed": 1868689131,
      "version": 1100,
      "versionNonce": 1031403293,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1749055022934,
      "link": null,
      "locked": false,
      "text": "TURKEY SORT(&STACK A, &STACK B)\n-pa, pa\n-while (sizeofStack(stackA) > 3)\n{\n        get_target(&stackA, &stackB)\n         node =get_node_to push(&stackA, &stackB);\n      \n}\ntiny_sort(&stackA)\nPush_back(&stack A, &stack B)",
      "fontSize": 20,
      "fontFamily": 6,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "TURKEY SORT(&STACK A, &STACK B)\n-pa, pa\n-while (sizeofStack(stackA) > 3)\n{\n        get_target(&stackA, &stackB)\n         node =get_node_to push(&stackA, &stackB);\n      \n}\ntiny_sort(&stackA)\nPush_back(&stack A, &stack B)",
      "autoResize": true,
      "lineHeight": 1.35
    },
    {
      "id": "Eo2IiCKNVArtQIjBVBlRX",
      "type": "text",
      "x": 712.6400921397359,
      "y": 2605.65485080708,
      "width": 494.807373046875,
      "height": 374.4328834604552,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "aG",
      "roundness": null,
      "seed": 1618329451,
      "version": 603,
      "versionNonce": 270106323,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1749054588323,
      "link": null,
      "locked": false,
      "text": " attribute_target(&stack A, &stack b)\n    {\n        while(stackA)\n       {\n             -if (stackA->value  > biggest_value(STACK B) \n                stackA->target = biggest_value(stack B) \n            -else if(stackA>value < smallest_number(STACK B))\n                        stackA->target =  smallest_value(stack B)     \n              -Else\n                   {\n                       stackA->target= get_target(stack A, &stack b)\n                    }\n            stackA = stackA->next\n        }\n            ",
      "fontSize": 18.490512763479266,
      "fontFamily": 6,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": " attribute_target(&stack A, &stack b)\n    {\n        while(stackA)\n       {\n             -if (stackA->value  > biggest_value(STACK B) \n                stackA->target = biggest_value(stack B) \n            -else if(stackA>value < smallest_number(STACK B))\n                        stackA->target =  smallest_value(stack B)     \n              -Else\n                   {\n                       stackA->target= get_target(stack A, &stack b)\n                    }\n            stackA = stackA->next\n        }\n            ",
      "autoResize": true,
      "lineHeight": 1.35
    },
    {
      "id": "irLy2AtQ4No4XN70ggJ-r",
      "type": "text",
      "x": 668.3044420511567,
      "y": 2481.777589041555,
      "width": 427.0595703125,
      "height": 27,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "aH",
      "roundness": null,
      "seed": 1107720805,
      "version": 59,
      "versionNonce": 28569259,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1749049614629,
      "link": null,
      "locked": false,
      "text": "FUNCTION LIST_SIZE TO KNOW THE MEDIAN",
      "fontSize": 20,
      "fontFamily": 6,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "FUNCTION LIST_SIZE TO KNOW THE MEDIAN",
      "autoResize": true,
      "lineHeight": 1.35
    },
    {
      "id": "YUcji9rNMWC5eVXuW9PPs",
      "type": "text",
      "x": 971.5310116287642,
      "y": 2039.383015948572,
      "width": 208.7798309326172,
      "height": 25,
      "angle": 0,
      "strokeColor": "#e03131",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "aJ",
      "roundness": null,
      "seed": 2109670547,
      "version": 21,
      "versionNonce": 999857427,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1749054671156,
      "link": null,
      "locked": false,
      "text": "INT MAX MATTERS!",
      "fontSize": 20,
      "fontFamily": 5,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "INT MAX MATTERS!",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "KcoIDEfufTUbFs0eqUkd_",
      "type": "text",
      "x": 879.5310116287642,
      "y": 3071.383015948572,
      "width": 506.9394836425781,
      "height": 675,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "aK",
      "roundness": null,
      "seed": 510690355,
      "version": 727,
      "versionNonce": 1090558899,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1749056239859,
      "link": null,
      "locked": false,
      "text": "push_back(stack *A, stack *B)\n{\n    int target_above_median = 0;\n        while (stack B)\n        {\n                if (is_target_above_median(&stackA, &stacKB)\n                        target_above_median = 1\n            while (stack B-> target != stack A->value)\n                    {\n                        if (target_above_median);\n                            ra\n                        else\n                            rr\n                      }\n              pb\n         }\n           while (stackA->value != minimum_value(&stackA)\n              \n               \n \nrotate_min_to_top(stack *A)\n{\n        int above_median =0;\n        \n        ",
      "fontSize": 20,
      "fontFamily": 6,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "push_back(stack *A, stack *B)\n{\n    int target_above_median = 0;\n        while (stack B)\n        {\n                if (is_target_above_median(&stackA, &stacKB)\n                        target_above_median = 1\n            while (stack B-> target != stack A->value)\n                    {\n                        if (target_above_median);\n                            ra\n                        else\n                            rr\n                      }\n              pb\n         }\n           while (stackA->value != minimum_value(&stackA)\n              \n               \n \nrotate_min_to_top(stack *A)\n{\n        int above_median =0;\n        \n        ",
      "autoResize": true,
      "lineHeight": 1.35
    }
  ],
  "appState": {
    "gridSize": 20,
    "gridStep": 5,
    "gridModeEnabled": false,
    "viewBackgroundColor": "#ffffff"
  },
  "files": {}
}